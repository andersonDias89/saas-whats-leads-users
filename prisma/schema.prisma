// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Modelos para autenticação NextAuth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  companyName   String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Configurações do usuário
  twilioAccountSid      String?
  twilioAuthToken       String?
  twilioWhatsappNumber  String?
  twilioSandboxKeyword  String?
  openaiApiKey          String?
  aiPrompt              String?

  accounts      Account[]
  sessions      Session[]
  conversations Conversation[]
  leads         Lead[]
  messages      Message[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Modelos do negócio
model Conversation {
  id           String   @id @default(cuid())
  userId       String
  phoneNumber  String
  contactName  String?
  status       String   @default("active") // active, closed, archived
  lastMessage  String?
  lastMessageAt DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages Message[]
  leads    Lead[]

  @@index([userId, phoneNumber])
}

model Message {
  id             String   @id @default(cuid())
  conversationId String
  userId         String
  content        String
  direction      String   // inbound, outbound
  messageType    String   @default("text") // text, image, audio, etc
  twilioSid      String?
  status         String   @default("sent") // sent, delivered, read, failed
  createdAt      DateTime @default(now())

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@index([userId])
}

model Lead {
  id             String   @id @default(cuid())
  userId         String
  conversationId String?
  name           String?
  phone          String
  email          String?
  status         String   @default("novo") // novo, qualificado, nao_interessado, fechado
  source         String   @default("whatsapp")
  notes          String?
  value          Float?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversation Conversation? @relation(fields: [conversationId], references: [id])

  @@index([userId])
  @@index([status])
}
