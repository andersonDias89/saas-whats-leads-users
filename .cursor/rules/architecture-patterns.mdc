# üèóÔ∏è Arquitetura Refatorada - Cursor SaaS WhatsApp Leads

## üìÅ Estrutura de Pastas Obrigat√≥ria

### **Organiza√ß√£o por Dom√≠nio:**
- `src/schemas/[domain]/` - Schemas Zod organizados por dom√≠nio
- `src/types/[domain]/` - Tipos TypeScript organizados por dom√≠nio  
- `src/services/[domain]/` - Services (camada de neg√≥cio) por dom√≠nio
- `src/hooks/[domain]/` - Hooks customizados por dom√≠nio
- `src/lib/utils/` - Utilit√°rios centralizados (constants, formatting, date)

### **Exports Centralizados:**
- Cada pasta de dom√≠nio deve ter `index.ts` com exports
- `src/schemas/index.ts` - Exports globais de schemas
- `src/types/index.ts` - Exports globais de tipos
- `src/services/index.ts` - Exports globais de services
- `src/hooks/index.ts` - Exports globais de hooks

## üîß Padr√µes de Implementa√ß√£o Obrigat√≥rios

### **1. Schemas Zod:**
```typescript
// src/schemas/[domain]/entity.ts
import { z } from 'zod'

export const entitySchema = z.object({
  id: z.string(),
  // ... outros campos
})

export type Entity = z.infer<typeof entitySchema>
```

### **2. Services (Camada de Neg√≥cio):**
```typescript
// src/services/[domain]/entity-service.ts
import { prisma } from '@/lib/prisma'
import { Entity } from '@/schemas/[domain]'

export class EntityService {
  async getAll(): Promise<Entity[]> {
    return await prisma.entity.findMany()
  }
  
  async getById(id: string): Promise<Entity | null> {
    return await prisma.entity.findUnique({ where: { id } })
  }
  
  async update(id: string, data: Partial<Entity>): Promise<Entity> {
    return await prisma.entity.update({ where: { id }, data })
  }
  
  async delete(id: string): Promise<void> {
    await prisma.entity.delete({ where: { id } })
  }
}
```

### **3. Custom Hooks:**
```typescript
// src/hooks/[domain]/use-entities.ts
import { useState, useEffect, useCallback } from 'react'
import { Entity } from '@/types/[domain]'
import { EntityService } from '@/services/[domain]'

export function useEntities() {
  const [entities, setEntities] = useState<Entity[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)

  const fetchEntities = useCallback(async () => {
    try {
      setLoading(true)
      const service = new EntityService()
      const data = await service.getAll()
      setEntities(data)
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Erro ao carregar dados')
    } finally {
      setLoading(false)
    }
  }, [])

  useEffect(() => {
    fetchEntities()
  }, [fetchEntities])

  return { entities, loading, error, refetch: fetchEntities }
}
```

### **4. APIs (Usar Service Layer):**
```typescript
// src/app/api/[domain]/route.ts
import { NextRequest, NextResponse } from 'next/server'
import { EntityService } from '@/services/[domain]'

export async function GET() {
  try {
    const service = new EntityService()
    const entities = await service.getAll()
    return NextResponse.json(entities)
  } catch (error) {
    console.error('Erro:', error)
    return NextResponse.json(
      { message: 'Erro interno do servidor' },
      { status: 500 }
    )
  }
}
```

### **5. Componentes (Usar Hooks e Utilit√°rios):**
```typescript
// src/app/dashboard/[domain]/page.tsx
import { useEntities } from '@/hooks/[domain]'
import { ENTITY_OPTIONS } from '@/lib/utils/constants'
import { formatEntity } from '@/lib/utils/formatting'

export default function EntityPage() {
  const { entities, loading, error } = useEntities()
  
  if (loading) return <div>Carregando...</div>
  if (error) return <div>Erro: {error}</div>
  
  return (
    <div>
      {entities.map(entity => (
        <div key={entity.id}>
          {formatEntity(entity)}
        </div>
      ))}
    </div>
  )
}
```

## üö® Regras Cr√≠ticas

### **NUNCA FAZER:**
- ‚ùå Criar APIs fora de `src/app/api/`
- ‚ùå Usar Prisma diretamente em componentes
- ‚ùå Duplicar constantes ou utilit√°rios
- ‚ùå Misturar l√≥gica de neg√≥cio com UI
- ‚ùå Usar `any` sem justificativa

### **SEMPRE FAZER:**
- ‚úÖ Organizar por dom√≠nio (leads, conversations, dashboard)
- ‚úÖ Usar service layer para opera√ß√µes de banco
- ‚úÖ Usar hooks customizados para estado
- ‚úÖ Centralizar constantes em `src/lib/utils/constants.ts`
- ‚úÖ Centralizar formata√ß√£o em `src/lib/utils/formatting.ts`
- ‚úÖ Validar com Zod em todas as APIs
- ‚úÖ Tratar erros adequadamente

## üìã Checklist para Novas Features

### **1. Schemas e Tipos:**
- [ ] Criar schema Zod em `src/schemas/[domain]/`
- [ ] Criar tipos TypeScript em `src/types/[domain]/`
- [ ] Adicionar exports nos arquivos `index.ts`

### **2. Services:**
- [ ] Criar service em `src/services/[domain]/`
- [ ] Implementar m√©todos CRUD
- [ ] Adicionar tratamento de erros
- [ ] Adicionar exports no `index.ts`

### **3. Hooks:**
- [ ] Criar hook em `src/hooks/[domain]/`
- [ ] Implementar estado e l√≥gica
- [ ] Adicionar tratamento de erros
- [ ] Adicionar exports no `index.ts`

### **4. APIs:**
- [ ] Criar rota em `src/app/api/[domain]/`
- [ ] Usar service layer
- [ ] Implementar valida√ß√£o com Zod
- [ ] Adicionar tratamento de erros

### **5. Componentes:**
- [ ] Usar hooks customizados
- [ ] Usar constantes centralizadas
- [ ] Usar utilit√°rios de formata√ß√£o
- [ ] Implementar loading states

## üìö Documenta√ß√£o

Consulte [docs/architecture.md](mdc:docs/architecture.md) para detalhes completos da arquitetura.
description:
globs:
alwaysApply: false
---
