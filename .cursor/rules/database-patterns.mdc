# Padrões de Banco de Dados - Cursor SaaS WhatsApp Leads

## 🗄️ Status em Português

### ✅ Correto:
```typescript
// Frontend
const statusOptions = [
  { value: 'novo', label: 'Novo' },
  { value: 'qualificado', label: 'Qualificado' },
  { value: 'nao_interessado', label: 'Não Interessado' },
  { value: 'fechado', label: 'Fechado' }
]

// Backend (Prisma)
model Lead {
  status String @default("novo")
}
```

### ❌ Evitar:
```typescript
// Misturar idiomas
{ value: 'new', label: 'Novo' }
{ value: 'contacted', label: 'Contactado' }
```

## 🔗 Relacionamentos

### ✅ Correto:
```typescript
// Sempre incluir relacionamentos necessários
const lead = await prisma.lead.findFirst({
  where: { id },
  include: {
    conversation: true,
    user: true
  }
})
```

## 📱 Webhook e Leads

### ✅ Criação de Lead via Webhook:
```typescript
// Criar ou atualizar lead
let lead = await prisma.lead.findFirst({
  where: {
    userId: user.id,
    phone: from
  }
})

if (!lead) {
  lead = await prisma.lead.create({
    data: {
      userId: user.id,
      conversationId: conversation.id,
      name: profileName || waId || from,
      phone: from,
      status: 'novo', // SEMPRE em português
      source: 'whatsapp'
    }
  })
}
```

## ✏️ Criação Manual de Leads

### ✅ Criação Manual:
```typescript
// Criar lead manualmente
const lead = await prisma.lead.create({
  data: {
    userId: user.id,
    name: data.name,
    phone: data.phone,
    email: data.email || null,
    status: data.status,
    notes: data.notes || null,
    source: 'manual' // Sempre 'manual' para cadastros manuais
    // conversationId: null (leads manuais não têm conversa)
  },
  include: {
    conversation: true,
    user: {
      select: {
        id: true,
        name: true,
        email: true
      }
    }
  }
})
```

### ✅ Validação de Telefone Único:
```typescript
// Verificar se já existe lead com o mesmo telefone
const existingLead = await prisma.lead.findFirst({
  where: {
    userId: user.id,
    phone: data.phone
  }
})

if (existingLead) {
  throw new Error('Já existe um lead com este telefone')
}
```

## 📊 Modelo de Dados Atualizado

### ✅ Schema do Lead:
```prisma
model Lead {
  id             String   @id @default(cuid())
  userId         String
  conversationId String?  // Opcional - leads manuais não têm conversa
  name           String?
  phone          String
  email          String?
  status         String   @default("novo") // novo, qualificado, nao_interessado, fechado
  source         String   @default("whatsapp") // whatsapp, manual
  notes          String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversation Conversation? @relation(fields: [conversationId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([status])
}
```

## 🔄 Regras de Negócio

### ✅ Origem dos Leads:
- **`source: 'whatsapp'`**: Leads criados via webhook do WhatsApp
- **`source: 'manual'`**: Leads cadastrados manualmente pelo usuário
- **Conversa opcional**: Leads manuais não têm `conversationId`

### ✅ Validações:
- **Telefone único**: Não pode existir dois leads com o mesmo telefone para o mesmo usuário
- **Nome obrigatório**: Para criação manual, nome é obrigatório
- **Email opcional**: Pode ser vazio ou nulo
- **Status em português**: Sempre usar valores em português

### ✅ Operações CRUD:
```typescript
// Buscar leads do usuário
const leads = await prisma.lead.findMany({
  where: { userId },
  include: { conversation: true },
  orderBy: { createdAt: 'desc' }
})

// Criar lead manual
const lead = await prisma.lead.create({
  data: { /* dados validados */ },
  include: { conversation: true }
})

// Atualizar lead
const updatedLead = await prisma.lead.update({
  where: { id: leadId },
  data: { /* dados de atualização */ },
  include: { conversation: true }
})

// Deletar lead (com conversa se existir)
await prisma.$transaction(async (tx) => {
  if (lead.conversation) {
    await tx.message.deleteMany({
      where: { conversationId: lead.conversation.id }
    })
    await tx.conversation.delete({
      where: { id: lead.conversation.id }
    })
  }
  await tx.lead.delete({ where: { id: leadId } })
})
```

## 🚨 Regras Importantes
- **Status sempre em português** (`'novo'`, `'qualificado'`, `'nao_interessado'`, `'fechado'`)
- **Source obrigatório** (`'whatsapp'` ou `'manual'`)
- **Conversa opcional** para leads manuais
- **Telefone único** por usuário
- **Incluir relacionamentos** quando necessário
- **Usar default values** do Prisma schema
- **Validar dados** antes de salvar

## 📚 Referências
- [prisma/schema.prisma](mdc:prisma/schema.prisma) - Schema do banco
- [docs/best-practices.md](mdc:docs/best-practices.md) - Padrões gerais
- [docs/architecture.md](mdc:docs/architecture.md) - Arquitetura detalhada

- [prisma/schema.prisma](mdc:prisma/schema.prisma) - Schema do banco
- [docs/best-practices.md](mdc:docs/best-practices.md) - Padrões gerais
